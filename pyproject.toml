[tool.poetry]
name = "htap"
version = "0.1.0"
description = "MEng Project: Instance-Optimized Fusion of AWS Database Services"
authors = ["dfangs <dfanggohans@gmail.com>"]
readme = "README.md"
packages = [{ include = "htap", from = "src" }]                                  # Needed for src-based layout

[tool.poetry.dependencies]
python = "^3.11"
typing-extensions = "^4.5.0"
attrs = "^22.2.0"
immutables = "^0.19"
pulumi = "^3.65.1"
pulumi-aws = "^5.39.0"
psycopg = { extras = ["binary"], version = "^3.1.8" }
pglast = "^5.1"
numpy = "^1.24.3"
pandas = "^2.0.1"
pendulum = "^2.1.2"
humanize = "^4.6.0"
aiobotocore = "^2.5.0"
types-aiobotocore = { extras = ["s3"], version = "^2.5.0.post2" }

[tool.poetry.group.test.dependencies]
pytest = "^7.3.1"
pytest-mock = "^3.10.0"
pytest-asyncio = "^0.21.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pylint = "^2.17.2"
black = { extras = ["jupyter"], version = "^23.3.0" }
isort = "^5.12.0"
jupyter = "^1.0.0"
ipykernel = "^6.22.0"

[tool.pytest.ini_options]
# Put all tests in the specified directory
# Reference: https://docs.pytest.org/en/latest/reference/customize.html
testpaths = ["tests"]

# Recommended import mode for new projects
# (1) Unlike the older (but default) `prepend` import mode,
#     this doesn't require test files to have unique names
# (2) Test modules are non-importable by each other
#     (and thus no need for `__init__.py`)
# Reference: https://docs.pytest.org/en/latest/explanation/goodpractices.html#which-import-mode
addopts = ["--import-mode=importlib"]

# Importing `pulumi` seems to trigger some `DeprecationWarning` when running `pytest`
# Reference: https://docs.pytest.org/en/stable/how-to/capture-warnings.html#deprecationwarning-and-pendingdeprecationwarning
filterwarnings = [
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:aws.* has been deprecated in favor of .*:DeprecationWarning",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

### LINTER & FORMATTER SETTINGS ###

[tool.pylint.'BASIC']
good-names = [
    "i",
    "j",
    "k",   # `for k, v in map.items()`
    "v",
    "ex",
    "Run",
    "_",
    "exc", # Exception
    "eg",  # Exception group
    "at",
    "f",   # File handle
    "fp",  # File pointer
    "p",   # Probability
    "id",
    "sg",  # Security group
    "tg",  # asyncio `TaskGroup`
]

[tool.pylint.'FORMAT']
# Reference: https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#pylint
max-line-length = 88

[tool.pylint.'MESSAGES CONTROL']
disable = [
    "no-name-in-module",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",

    # False positives caused by `attrs`
    # See https://github.com/ComPWA/ampform/blob/main/.pylintrc for reference
    "no-member",       # Conflict: `Mapping` + `attrs.field()` + `map.items()`
    "not-an-iterable", # Conflict: `Sequence` + `attrs.field(converter=...)`
]

[tool.black]
line-length = 88 # Default value

[tool.isort]
# Reference: https://pycqa.github.io/isort/docs/configuration/black_compatibility.html
profile = "black"
